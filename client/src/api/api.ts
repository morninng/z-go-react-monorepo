/* tslint:disable */
/* eslint-disable */
/**
 * Sample API
 * API for Sample
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: yuta.moriyama@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 400番エラー
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * 
     * @type {BadRequestErrorCodeEnum}
     * @memberof BadRequestError
     */
    code: BadRequestErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BadRequestError
     */
    message: string;
}
/**
 * 400番エラーのコード
 * @export
 * @enum {string}
 */

export enum BadRequestErrorCodeEnum {
    Json = 'invalid_json',
    Parameter = 'invalid_parameter',
    Token = 'invalid_token'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum ErrorCodeEnum {
    InternalServerError = 'internal_server_error',
    AlreadyExists = 'already_exists',
    NotFound = 'not_found'
}

/**
 * 403番エラー
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
    /**
     * 
     * @type {ForbiddenErrorCodeEnum}
     * @memberof ForbiddenError
     */
    code: ForbiddenErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ForbiddenError
     */
    message: string;
}
/**
 * 403番のエラーコード
 * @export
 * @enum {string}
 */

export enum ForbiddenErrorCodeEnum {
    NotAllowed = 'not_allowed'
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorCodeEnum}
     * @memberof ModelError
     */
    code: ErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum RoleEnum {
    Admin = 'admin',
    Editor = 'editor',
    Viewer = 'viewer'
}

/**
 * タスク
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    name: string;
    /**
     * タスクの内容
     * @type {string}
     * @memberof Task
     */
    constent: string;
}
/**
 * 401(認証)番エラー
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
    /**
     * 
     * @type {UnauthorizedErrorCodeEnum}
     * @memberof UnauthorizedError
     */
    code: UnauthorizedErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedError
     */
    message: string;
}
/**
 * 401(認証)番のエラーコード
 * @export
 * @enum {string}
 */

export enum UnauthorizedErrorCodeEnum {
    InvalidToken = 'invalid_token',
    ExpiredToken = 'expired_token'
}


/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTaskId: async (taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTaskTaskId', 'taskId', taskId)
            const localVarPath = `/task/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTaskId(taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskTaskId(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTasks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTaskId(taskId: string, options?: any): AxiosPromise<Task> {
            return localVarFp.getTaskTaskId(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.getTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.postTasks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * タスク詳細取得
     * @summary タスク詳細取得
     * @param {string} taskId タスクID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getTaskTaskId(taskId: string, options?: any) {
        return AdminApiFp(this.configuration).getTaskTaskId(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスク群取得
     * @summary タスク群取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getTasks(options?: any) {
        return AdminApiFp(this.configuration).getTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスク群取得
     * @summary タスク群作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public postTasks(options?: any) {
        return AdminApiFp(this.configuration).postTasks(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EditorApi - axios parameter creator
 * @export
 */
export const EditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTaskId: async (taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTaskTaskId', 'taskId', taskId)
            const localVarPath = `/task/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditorApi - functional programming interface
 * @export
 */
export const EditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditorApiAxiosParamCreator(configuration)
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTaskId(taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskTaskId(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTasks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditorApi - factory interface
 * @export
 */
export const EditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditorApiFp(configuration)
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTaskId(taskId: string, options?: any): AxiosPromise<Task> {
            return localVarFp.getTaskTaskId(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.getTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.postTasks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EditorApi - object-oriented interface
 * @export
 * @class EditorApi
 * @extends {BaseAPI}
 */
export class EditorApi extends BaseAPI {
    /**
     * タスク詳細取得
     * @summary タスク詳細取得
     * @param {string} taskId タスクID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorApi
     */
    public getTaskTaskId(taskId: string, options?: any) {
        return EditorApiFp(this.configuration).getTaskTaskId(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスク群取得
     * @summary タスク群取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorApi
     */
    public getTasks(options?: any) {
        return EditorApiFp(this.configuration).getTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスク群取得
     * @summary タスク群作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorApi
     */
    public postTasks(options?: any) {
        return EditorApiFp(this.configuration).postTasks(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ViewerApi - axios parameter creator
 * @export
 */
export const ViewerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTaskId: async (taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTaskTaskId', 'taskId', taskId)
            const localVarPath = `/task/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewerApi - functional programming interface
 * @export
 */
export const ViewerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewerApiAxiosParamCreator(configuration)
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskTaskId(taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskTaskId(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTasks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ViewerApi - factory interface
 * @export
 */
export const ViewerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewerApiFp(configuration)
    return {
        /**
         * タスク詳細取得
         * @summary タスク詳細取得
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskTaskId(taskId: string, options?: any): AxiosPromise<Task> {
            return localVarFp.getTaskTaskId(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * タスク群取得
         * @summary タスク群取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.getTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * タスク群取得
         * @summary タスク群作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTasks(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.postTasks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export class ViewerApi extends BaseAPI {
    /**
     * タスク詳細取得
     * @summary タスク詳細取得
     * @param {string} taskId タスクID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    public getTaskTaskId(taskId: string, options?: any) {
        return ViewerApiFp(this.configuration).getTaskTaskId(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスク群取得
     * @summary タスク群取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    public getTasks(options?: any) {
        return ViewerApiFp(this.configuration).getTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスク群取得
     * @summary タスク群作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    public postTasks(options?: any) {
        return ViewerApiFp(this.configuration).postTasks(options).then((request) => request(this.axios, this.basePath));
    }
}


